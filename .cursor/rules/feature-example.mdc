---
description: 
globs: 
alwaysApply: true
---
# Example: Adding a New Feature

**(Note: For a more complex, real-world example within this specific project, refer to the implementation of the AI Email Generation feature, primarily in `frappe-bench/apps/crm/crm/api/ai_email.py` and `frappe-bench/apps/crm/frontend/src/components/Modals/BulkAIEmailModal.vue`).**

This example demonstrates adding a simple "Task Timer" feature to track time spent on tasks, illustrating the basic steps involved.

## 1. Create DocType

First, create the DocType for storing task time entries:

```bash
# Run from the frappe-bench directory
bench make-doctype "Task Timer"
```

Define fields in the DocType JSON file (`frappe-bench/apps/crm/crm/fcrm/doctype/task_timer/task_timer.json`):
```json
{
  "fields": [
    {
      "fieldname": "task",
      "fieldtype": "Link",
      "label": "Task",
      "options": "Task",
      "reqd": 1
    },
    {
      "fieldname": "start_time",
      "fieldtype": "Datetime",
      "label": "Start Time",
      "reqd": 1
    },
    {
      "fieldname": "end_time",
      "fieldtype": "Datetime",
      "label": "End Time"
    },
    {
      "fieldname": "duration",
      "fieldtype": "Duration",
      "label": "Duration",
      "read_only": 1
    }
  ]
}
```

## 2. Create Frontend Components

### Add Icon (TaskTimerIcon.vue)
```vue
<!-- frappe-bench/apps/crm/frontend/src/components/Icons/TaskTimerIcon.vue -->
<template>
  <svg width="16" height="16" viewBox="0 0 16 16">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zm0 2a6 6 0 1 0 0 12A6 6 0 0 0 8 2zm1 2v4.5l2.7 2.7-1.4 1.4L7 9.3V4h2z"/>
  </svg>
</template>
```

### Add Page Component
```vue
<!-- frappe-bench/apps/crm/frontend/src/pages/TaskTimerPage.vue -->
<template>
  <div class="task-timer">
    <h1>Task Timer</h1>
    <div class="timer-controls">
      <Button @click="startTimer" :disabled="isRunning">Start</Button>
      <Button @click="stopTimer" :disabled="!isRunning">Stop</Button>
    </div>
    <div class="timer-list">
      <!-- Timer entries list -->
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useTaskTimer } from '@/composables/useTaskTimer' // Example composable

const { startTimer, stopTimer, isRunning } = useTaskTimer()
</script>
```

## 3. Add Route

Add route to `frappe-bench/apps/crm/frontend/src/router.js`:
```js
{
  path: '/task-timer',
  name: 'TaskTimer',
  component: () => import('@/pages/TaskTimerPage.vue')
}
```

## 4. Add to Sidebar (Optional)

If needed, add a link in `frappe-bench/apps/crm/frontend/src/components/Layouts/AppSidebar.vue`:
```vue
<SidebarLink
  :label="__('Task Timer')"
  :icon="TaskTimerIcon"
  :route="'/task-timer'"
  :isCollapsed="isSidebarCollapsed"
/>
```

## 5. Create API Endpoint

```python
# frappe-bench/apps/crm/crm/api/task_timer.py
import frappe
from frappe import _

@frappe.whitelist()
def start_timer(task):
    """Start a new timer for the given task"""
    timer = frappe.get_doc({
        "doctype": "Task Timer",
        "task": task,
        "start_time": frappe.utils.now_datetime()
    })
    timer.insert()
    # Commit necessary if called from background job
    # frappe.db.commit() 
    return timer

@frappe.whitelist()
def stop_timer(timer_id):
    """Stop an existing timer"""
    timer = frappe.get_doc("Task Timer", timer_id)
    timer.end_time = frappe.utils.now_datetime()
    timer.save()
    # Commit necessary if called from background job
    # frappe.db.commit() 
    return timer
```

## 6. Create Frontend Store/Composable (Optional)

```js
// Example: frappe-bench/apps/crm/frontend/src/composables/useTaskTimer.js
import { ref } from 'vue'
import { createResource } from 'frappe-ui'

export function useTaskTimer() {
  const currentTimer = ref(null)
  const isRunning = ref(false)

  const startTimer = createResource({
    url: 'crm.api.task_timer.start_timer',
    onSuccess: (data) => {
      currentTimer.value = data
      isRunning.value = true
    }
  })

  const stopTimer = createResource({
    url: 'crm.api.task_timer.stop_timer',
    onSuccess: () => {
      currentTimer.value = null
      isRunning.value = false
    }
  })

  return {
    startTimer,
    stopTimer,
    isRunning,
    currentTimer
  }
}
```

## 7. Local Testing & Committing

1.  **Run Locally:** Use `bench start` (and `yarn dev` if needed) to test the feature thoroughly.
2.  **Migrate DB:** Apply any DocType changes using `bench --site <your-site-name> migrate`.
3.  **Verify:** Ensure the feature works as expected locally.
4.  **Commit & Push:** Once verified, commit the changes to Git and push to the central GitHub repository (`sinx-solutions/frappeCRM`).
    ```bash
    git add .
    git commit -m "feat: Implement Task Timer feature"
    git push origin <branch-name>
    ```
